{"version":3,"sources":["Counter.js","Clock.js","Counter2.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","num","add","_this","interval","props","setState","sub","reset","this","number","react_default","a","createElement","onClick","React","Component","Clock","now","Date","startButtonDisable","handleInc","clockStop","clearInterval","intervalId","clockStart","setInterval","console","log","toLocaleTimeString","App","className","src_Counter","src_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAuCeA,oNApCbC,MAAQ,CACNC,IAAK,KAEPC,IAAM,WAAM,IACFD,EAAQE,EAAKH,MAAbC,IACAG,EAAaD,EAAKE,MAAlBD,SAERD,EAAKG,SAAS,CAACL,IAAIA,EAAMG,OAE3BG,IAAM,WAAM,IAGFN,EAAQE,EAAKH,MAAbC,IACAG,EAAaD,EAAKE,MAAlBD,SAERD,EAAKG,SAAS,CAACL,IAAIA,EAAMG,OAE3BI,MAAQ,WACNL,EAAKG,SAAS,CAACL,IAAI,6EAEZ,IACCA,EAAQQ,KAAKT,MAAbC,IACAS,EAAWD,KAAKJ,MAAhBK,OAER,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAIH,GACJC,EAAAC,EAAAC,cAAA,SAAIZ,GACJU,EAAAC,EAAAC,cAAA,UAAQC,QAASL,KAAKP,KAAtB,KACAS,EAAAC,EAAAC,cAAA,UAAQC,QAASL,KAAKF,KAAtB,KACAI,EAAAC,EAAAC,cAAA,UAAQC,QAASL,KAAKD,OAAtB,iBA/BcO,IAAMC,YCqCbC,GCrCQF,IAAMC,qNDCzBhB,MAAQ,CACJkB,IAAK,IAAIC,KACTC,oBAAoB,KAKxBC,UAAY,WACRlB,EAAKG,SAAS,CAAEY,IAAK,IAAIC,UAK7BG,UAAY,WACRC,cAAcpB,EAAKqB,YAEnBrB,EAAKG,SAAS,CAACc,oBAAmB,OAEtCK,WAAa,WACLtB,EAAKH,MAAMoB,qBACXjB,EAAKqB,WAAaE,YAAYvB,EAAKkB,UAAW,MAGlDlB,EAAKG,SAAS,CAACc,oBAAmB,wFAlBlCX,KAAKgB,0DAMLE,QAAQC,IAAInB,KAAKT,MAAMkB,sCAevB,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIJ,KAAKT,MAAMkB,IAAIW,sBACnBlB,EAAAC,EAAAC,cAAA,UAAQC,QAASL,KAAKa,WAAtB,QACAX,EAAAC,EAAAC,cAAA,UAAQC,QAASL,KAAKgB,YAAtB,iBA/BIV,IAAMC,YEsBXc,mLAfX,OACEnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,cAChBpB,EAAAC,EAAAC,cAAA,UAJO,UAIP,MACAF,EAAAC,EAAAC,cAACmB,EAAD,CAAStB,OAAQ,EAAGN,SAAU,IAC9BO,EAAAC,EAAAC,cAAA,UANO,UAMP,MACAF,EAAAC,EAAAC,cAACmB,EAAD,CAAStB,OAAQ,EAAGN,SAAU,IAC9BO,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACoB,EAAD,eAXQlB,IAAMC,WCMJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22de85d0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Counter extends React.Component {\n  state = {\n    num: 0\n  };\n  add = () => {\n    const { num } = this.state;\n    const { interval } = this.props;\n\n    this.setState({num:num + interval});\n  }\n  sub = () => {\n    // this.setState({num:this.state.num - this.props.interval});\n\n    const { num } = this.state;\n    const { interval } = this.props;\n\n    this.setState({num:num + interval});\n  }\n  reset = () => {\n    this.setState({num:0});\n  }\n  render() {\n    const { num } = this.state;\n    const { number } = this.props;\n\n    return (\n      <div>\n        <p>{number}</p>\n        <p>{num}</p>\n        <button onClick={this.add}>+</button>\n        <button onClick={this.sub}>-</button>\n        <button onClick={this.reset}>reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;","import React from 'react'\n\nclass Clock extends React.Component {\n    state = {\n        now: new Date(),\n        startButtonDisable: false\n    }\n    componentDidMount() {\n        this.clockStart();\n    }\n    handleInc = () => {\n        this.setState({ now: new Date() });\n    }\n    componentDidUpdate() {\n        console.log(this.state.now);\n    }\n    clockStop = () => {\n        clearInterval(this.intervalId);\n        // this.startButtonDisable = false;\n        this.setState({startButtonDisable:false})\n    }\n    clockStart = () => {\n        if(!this.state.startButtonDisable){\n            this.intervalId = setInterval(this.handleInc, 1000);\n        }\n        // this.startButtonDisable = true;\n        this.setState({startButtonDisable:true})\n    }\n    render() {\n        return (\n            <div>\n                <p>{this.state.now.toLocaleTimeString()}</p>\n                <button onClick={this.clockStop}>stop</button>\n                <button onClick={this.clockStart}>start</button>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React from 'react';\n\nclass Counter2 extends React.Component {\n  state = {\n    num: 0\n  };\n  add = () => {\n    this.setState({num:this.state.num + 2});\n  }\n  sub = () => {\n    this.setState({num:this.state.num - 2});\n  }\n  reset = () => {\n    this.setState({num:0});\n  }\n  render() {\n    return (\n      <div>\n        <p>{this.props.number}</p>\n        <p>{this.state.num}</p>\n        <button onClick={this.add}>+</button>\n        <button onClick={this.sub}>-</button>\n        <button onClick={this.reset}>reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter2;","import React from 'react';\nimport './App.css';\nimport Counter from './Counter';\nimport Counter2 from './Counter2';\nimport Clock from './Clock';\n\nclass App extends React.Component {\n  render() {\n    const text = 'Counter';\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>{text} 1</h1>\n          <Counter number={0} interval={1}/>\n          <h1>{text} 2</h1>\n          <Counter number={0} interval={2}/>\n          <h1>Clock</h1>\n          <Clock />\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}